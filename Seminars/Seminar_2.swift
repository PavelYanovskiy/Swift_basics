import UIKit

//Задачи:
//Написать функцию, которая на вход принимает число типа Int, а возвращает, является ли число четным

func isChet(a: Int) -> Bool {
    a % 2 == 0
}

//Написать функцию, которая на вход принимает 3 числа: a, b, c и возвращает результат вычисления b^2 - 4 * a * c
// пишем название функции, (аргументы) -> тип возвращаемого значения
func Calculate(a: Double, b: Double, c: Double) -> Double {
    b * b - 4 * a * c
}

Calculate(a: 7, b: 8, c: 9) //так вызываем фукнци.

//с помощью ярлыков и аргументов
// например если не хотим чтобы а=7 тогда указываем нижнее подчеркивание в функции (_ а)
// и в вызове соотвественно не нужно будет имя калкулейт(7..)

//если при объявлении хотим спользовать одно имя, а внутри другое, то вместо _ используем другое н-р with
// н-р калкулейт(with a:Double)

//в одной функции могут быть несколько ярлыков н-р calculat(with a:Double, _b:Double) и т.д.


//Написать функцию, которая рассчитает площадь прямоугольника. На вход два параметра: длина и ширина, на выход: площадь

func square(a: Double, b: Double) -> Double {
    a * b
}

//Напишите функции, которая на вход принимает целое положительное число, а возвращает сумму всех чисел от 1 до переданного числа

func add(a: Int) -> Int {
    var sum = 0 //у нас есть некая сумма, по началу ноль
    for num in 1...a { // при помощи цикла проходимся от 1 до переданного числа
        sum += num //скадываем и возвращаем полученную сумму
    }
    return sum
}

//Создать опционал с типом Int и создать еще одну переменную, которая содержит значение первой переменной, но не является опционалом.  Сделать это необходимо 2 способами: при помощи force unwrapping,  nil coalescing

//var: a: Int? = 5 //после типа указываем знак ?  - это значит что число  - опционал, это значит что а может быть или числом или ничем нил
//var b = a! //разворачиваем опционал при помощи форс анраппинг. ! - это принудительно разворачиваем а. т.е если в а что-то лежит, то а будет 5, а если там нил, словим краш приложения
//var c = a ?? 5 //есть новая переменная и присавем ей значение. т.е если в а что-то лежит, то с станет 5 - это безопасный способ разворачивания


//Блок 2
//Задачи:
//Создать перечисление, которое имеет в виде кейсов два вида чая: зеленый и черный
//Задать для кейсов названия “Black tea” и “Green tea”
//Написать внутри перечисления функцию, которая будет возвращать цвет чая в строковом формате, то есть, если это blackTea, то black, а если greenTea, то green
enum Tea: String {
    case green = "Green tea"
    case black = "Black tea"
    
    func colorOfTea() -> String {
        switch self { //свитч для того чтобы мы прошли по всем кейсам перечесления, потому что отличается от дефолтного значения
        case .black: return "Black"
        case .green: return "Green"
        }
    }
}
//Создать переменную с типом созданного перечисления, а затем при помощи print вывести цвет чая
let black = Tea.black //1 вариант создания перечисления
let green: Tea = .green //2 вариант создания перечисления

print(black.colorOfTea())
print(green.colorOfTea())


//Написать функцию, которая на вход принимает параметр типа Tea, но который является опционалом. Функция должна печатать название чая, если значение есть и “Данный вид чая не найден”, если значение nil. Написать функцию нужно в 2 вариантах: используя guard let, используя if let
func nameOfTea(_ tea: Tea?) {
    guard let tea = tea else {
        print("Данный вид чая не найден")
        return
    }
    print(tea.rawValue)
}
//nameOfTea(.black)
//nameOfTea(nil)

func teaName(_ tea: Tea?) {
    if let tea = tea { //этот ти который мы получили на вход фукнции и там указано что это опционал
        print(tea.rawValue)
    } else {
        print("Данный вид чая не найден")
    }
}

teaName(.green)
teaName(nil)